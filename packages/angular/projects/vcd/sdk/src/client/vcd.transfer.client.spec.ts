import {HttpClientModule, XhrFactory} from '@angular/common/http';
import {async, inject, TestBed} from '@angular/core/testing';
import {Subject} from 'rxjs';
import {LoggingInterceptor} from './logging.interceptor';
import {RequestHeadersInterceptor} from './request.headers.interceptor';
import {VcdHttpClient} from './vcd.http.client';
import {TransferProgress, TransferResult, VcdTransferClient} from './vcd.transfer.client';
import 'jasmine-ajax';
import { ResponseNormalizationInterceptor } from './response.normalization.interceptor';

// tslint:disable-next-line:only-arrow-functions
const TEST_BLOB = (function(base64: string): Blob {
    const binaryString = atob(base64);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return new Blob([bytes]);
// tslint:disable-next-line:max-line-length
})('');

class BrokenBlob implements Blob {
    type = 'blob';

    constructor(public size: number, public contentType = 'application/octet-stream') {

    }

    msClose() {
        throw Error('Unsupported');
    }

    msDetachStream() {
        throw Error('Unsupported');
    }

    slice(start = 0, end = this.size, contentType = this.contentType): BrokenBlob {
        return new BrokenBlob(end - start, contentType);
    }
}

describe('TransferClient', () => {
    beforeEach(() => {
        jasmine.Ajax.install();
    });

    beforeEach(async(() => {
        TestBed.configureTestingModule({
            imports: [
                HttpClientModule
            ],
            providers: [
                LoggingInterceptor,
                RequestHeadersInterceptor,
                ResponseNormalizationInterceptor,
                VcdHttpClient
            ]
        });
    }));

    afterEach(() => jasmine.Ajax.uninstall());

    it('uploads a file in a single chunk', (done) => inject([VcdHttpClient], (httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        jasmine.Ajax.stubRequest('testUrl')
            .andReturn({status: 200});
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', TEST_BLOB.size);
        transferClient
            .upload(TEST_BLOB)
            .subscribe((result: TransferResult) => {
                const requests = jasmine.Ajax.requests.filter('testUrl');
                expect(result.bytesSent).toEqual(TEST_BLOB.size, 'Wrong bytes sent');
                expect(result.chunksSent).toEqual(1, 'Wrong chunks sent');
                expect(result.filename).toEqual('<blob>', 'Wrong filename');
                expect(result.retryCount).toEqual(0, 'Unexpected retries');
                expect(result.transferUrl).toBe('testUrl');
                expect(requests.length).toEqual(result.chunksSent);

                const reader = new FileReader();
                reader.addEventListener('loadend', () => {
                    expect(requests[0].method).toBe('PUT', 'Method not a PUT');
                    expect(requests[0].requestHeaders['Content-Range'])
                        .toEqual(`bytes ${0}-${TEST_BLOB.size - 1}/${TEST_BLOB.size}`, 'Range header was incorrect');
                    expect(requests[0].params).toEqual(reader.result, 'Payload was incorrect');
                    done();
                });
                reader.addEventListener('error', (err) => {
                    fail(err);
                    done();
                });
                reader.readAsArrayBuffer(TEST_BLOB);
            }, (err: Error) => {
                fail(err);
                done();
            });
    })());

    it('uploads a file in multiple chunks', (done) => inject([VcdHttpClient], (httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        jasmine.Ajax.stubRequest('testUrl')
            .andReturn({status: 200});
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', 1024);
        transferClient
            .upload(TEST_BLOB)
            .subscribe((result: TransferResult) => {
                const requests = jasmine.Ajax.requests.filter('testUrl');
                expect(result.bytesSent).toEqual(TEST_BLOB.size, 'Wrong bytes sent');
                expect(result.chunksSent).toEqual(Math.ceil(TEST_BLOB.size / 1024), 'Wrong chunks sent');
                expect(result.filename).toEqual('<blob>', 'Wrong filename');
                expect(result.retryCount).toEqual(0, 'Unexpected retries');
                expect(result.transferUrl).toBe('testUrl');
                expect(requests.length).toEqual(result.chunksSent);

                let checksDone = 0;
                requests.forEach((request: JasmineAjaxRequest, chunkIndex) => {
                    const chunkStart = chunkIndex * 1024;
                    const chunkEnd = Math.min(chunkStart + 1024, TEST_BLOB.size);
                    const expectedRequestData = TEST_BLOB.slice(chunkStart, chunkEnd);
                    const reader = new FileReader();
                    reader.addEventListener('loadend', () => {
                        expect(request.method).toBe('PUT', 'Chunk ' + chunkIndex + ' was not a PUT');
                        expect(request.requestHeaders['Content-Range'])
                            // tslint:disable-next-line:max-line-length
                            .toEqual(`bytes ${chunkStart}-${chunkEnd - 1}/${TEST_BLOB.size}`, 'Chunk ' + chunkIndex + ' range header was incorrect');
                        expect(request.params).toEqual(reader.result, 'Chunk ' + chunkIndex + ' payload didn\'t match');
                        checksDone++;
                        if (checksDone === requests.length) {
                            done();
                        }
                    });
                    reader.addEventListener('error', (err) => {
                        fail(err);
                        checksDone++;
                        if (checksDone === requests.length) {
                            done();
                        }
                    });
                    reader.readAsArrayBuffer(expectedRequestData);
                });
            }, (err: Error) => {
                fail(err);
                done();
            });
    })());

    it('receives sensible progress during a chunked upload', (done) => inject([VcdHttpClient], (httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        jasmine.Ajax.stubRequest('testUrl')
            .andReturn({status: 200});
        const gobbledProgress: TransferProgress[] = [];
        const progressGobbler = new Subject<TransferProgress>();
        progressGobbler.subscribe((p) => gobbledProgress.push(p));
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', 1024);
        transferClient
            .upload(TEST_BLOB, progressGobbler)
            .subscribe((result: TransferResult) => {
                for (let i = 1; i < gobbledProgress.length; i++) {
                    expect(gobbledProgress[i].timeTakenMs).not.toBeLessThan(gobbledProgress[i - 1].timeTakenMs,
                        'progress time taken decreased at progress index ' + i);
                    expect(gobbledProgress[i].bytesSent).not.toBeLessThan(gobbledProgress[i - 1].bytesSent,
                        'progress bytes sent decreased at progress index ' + i);
                    expect(gobbledProgress[i].chunksRemaining).not.toBeGreaterThan(gobbledProgress[i - 1].chunksRemaining,
                        'progress chunks remaining increased at progress index ' + i);
                    expect(gobbledProgress[i].chunksSent).not.toBeLessThan(gobbledProgress[i - 1].chunksSent,
                        'progress chunks remaining decreased at progress index ' + i);
                    expect(gobbledProgress[i].bytesRemaining).not.toBeGreaterThan(gobbledProgress[i - 1].bytesRemaining,
                        'progress bytes remaining increased at progress index ' + i);
                    expect(gobbledProgress[i].percent).not.toBeLessThan(gobbledProgress[i - 1].percent,
                        'progress percent decreased at progress index ' + i);
                    expect(gobbledProgress[i].estimatedTimeRemainingMs).not.toBeLessThan(0,
                        'estimated time remaining negative at progress index ' + i);
                }

                const finalProgress = gobbledProgress[gobbledProgress.length - 1];
                expect(finalProgress.bytesSent).toBe(TEST_BLOB.size, 'final progress bytes sent wrong');
                expect(finalProgress.chunksRemaining).toBe(0, 'final progress chunks remaining wrong');
                expect(finalProgress.chunksSent).toBe(31, 'final progress chunks sent wrong');
                expect(finalProgress.bytesRemaining).toBe(0, 'final progress bytes remaining wrong');
                expect(finalProgress.percent).toBe(100, 'final progress percent wrong');

                done();
            }, (err: Error) => {
                fail(err);
                done();
            });
    })());

    it('handles an unchunked endpoint failing with a 404', (done) => inject([VcdHttpClient], (httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        jasmine.Ajax.stubRequest('testUrl')
            .andReturn({status: 404});
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', TEST_BLOB.size, 2);
        transferClient
            .upload(TEST_BLOB)
            .subscribe((result: TransferResult) => {
                fail('Should not have succeeded');
                done();
            }, (err: Error) => {
                const requests = jasmine.Ajax.requests.filter('testUrl');
                expect(requests.length).toEqual(3, '3 attempts should have been made');

                const reader = new FileReader();
                reader.addEventListener('loadend', () => {
                    expect(requests[0].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-${TEST_BLOB.size - 1}/${TEST_BLOB.size}`, 'First try range header was incorrect');
                    expect(requests[0].params).toEqual(reader.result, 'First try payload was incorrect');

                    expect(requests[1].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-${TEST_BLOB.size - 1}/${TEST_BLOB.size}`, 'Second try range header was incorrect');
                    expect(requests[1].params).toEqual(reader.result, 'Second try payload was incorrect');

                    expect(requests[0].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-${TEST_BLOB.size - 1}/${TEST_BLOB.size}`, 'Third try range header was incorrect');
                    expect(requests[0].params).toEqual(reader.result, 'Third try payload was incorrect');

                    done();
                });
                reader.addEventListener('error', (e) => {
                    fail(e);
                    done();
                });
                reader.readAsArrayBuffer(TEST_BLOB);
                done();
            });
    })());

    it('handles a chunked endpoint failing with a 404', (done) => inject([VcdHttpClient], (httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        jasmine.Ajax.stubRequest('testUrl')
            .andReturn({status: 404});
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', 1024, 2);
        transferClient
            .upload(TEST_BLOB)
            .subscribe((result: TransferResult) => {
                fail('Should not have succeeded');
                done();
            }, (err: Error) => {
                const requests = jasmine.Ajax.requests.filter('testUrl');
                expect(requests.length).toEqual(3, '3 attempts should have been made');

                const reader = new FileReader();
                reader.addEventListener('loadend', () => {
                    expect(requests[0].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-1023/${TEST_BLOB.size}`, 'First try range header was incorrect');
                    expect(requests[0].params).toEqual(reader.result, 'First try payload was incorrect');

                    expect(requests[1].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-1023/${TEST_BLOB.size}`, 'Second try range header was incorrect');
                    expect(requests[1].params).toEqual(reader.result, 'Second try payload was incorrect');

                    expect(requests[0].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-1023/${TEST_BLOB.size}`, 'Third try range header was incorrect');
                    expect(requests[0].params).toEqual(reader.result, 'Third try payload was incorrect');

                    done();
                });
                reader.addEventListener('error', (e) => {
                    fail(e);
                    done();
                });
                reader.readAsArrayBuffer(TEST_BLOB.slice(0, 1023));
                done();
            });
    })());

    it('handles an unchunked endpoint failing with a 500', (done) => inject([VcdHttpClient], (httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        jasmine.Ajax.stubRequest('testUrl')
            .andReturn({status: 500});
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', TEST_BLOB.size, 2);
        transferClient
            .upload(TEST_BLOB)
            .subscribe((result: TransferResult) => {
                fail('Should not have succeeded');
                done();
            }, (err: Error) => {
                const requests = jasmine.Ajax.requests.filter('testUrl');
                expect(requests.length).toEqual(3, '3 attempts should have been made');

                const reader = new FileReader();
                reader.addEventListener('loadend', () => {
                    expect(requests[0].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-${TEST_BLOB.size - 1}/${TEST_BLOB.size}`, 'First try range header was incorrect');
                    expect(requests[0].params).toEqual(reader.result, 'First try payload was incorrect');

                    expect(requests[1].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-${TEST_BLOB.size - 1}/${TEST_BLOB.size}`, 'Second try range header was incorrect');
                    expect(requests[1].params).toEqual(reader.result, 'Second try payload was incorrect');

                    expect(requests[0].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-${TEST_BLOB.size - 1}/${TEST_BLOB.size}`, 'Third try range header was incorrect');
                    expect(requests[0].params).toEqual(reader.result, 'Third try payload was incorrect');

                    done();
                });
                reader.addEventListener('error', (e) => {
                    fail(e);
                    done();
                });
                reader.readAsArrayBuffer(TEST_BLOB);
                done();
            });
    })());

    it('handles a chunked endpoint failing with a 500', (done) => inject([VcdHttpClient], (httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        jasmine.Ajax.stubRequest('testUrl')
            .andReturn({status: 500});
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', 1024, 2);
        transferClient
            .upload(TEST_BLOB)
            .subscribe((result: TransferResult) => {
                fail('Should not have succeeded');
                done();
            }, (err: Error) => {
                const requests = jasmine.Ajax.requests.filter('testUrl');
                expect(requests.length).toEqual(3, '3 attempts should have been made');

                const reader = new FileReader();
                reader.addEventListener('loadend', () => {
                    expect(requests[0].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-1023/${TEST_BLOB.size}`, 'First try range header was incorrect');
                    expect(requests[0].params).toEqual(reader.result, 'First try payload was incorrect');

                    expect(requests[1].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-1023/${TEST_BLOB.size}`, 'Second try range header was incorrect');
                    expect(requests[1].params).toEqual(reader.result, 'Second try payload was incorrect');

                    expect(requests[0].requestHeaders['Content-Range'])
                        .toEqual(`bytes 0-1023/${TEST_BLOB.size}`, 'Third try range header was incorrect');
                    expect(requests[0].params).toEqual(reader.result, 'Third try payload was incorrect');

                    done();
                });
                reader.addEventListener('error', (e) => {
                    fail(e);
                    done();
                });
                reader.readAsArrayBuffer(TEST_BLOB.slice(0, 1023));
                done();
            });
    })());

    it('handles an unchunked endpoint failing with a read error', (done) => inject([VcdHttpClient], (httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        jasmine.Ajax.stubRequest('testUrl')
            .andReturn({status: 200});
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', TEST_BLOB.size, 2);
        transferClient
            .upload(new BrokenBlob(TEST_BLOB.size)) // This should definitely bork
            .subscribe((result: TransferResult) => {
                fail('Should not have succeeded');
                done();
            }, (err: Error) => {
                const requests = jasmine.Ajax.requests.filter('testUrl');
                expect(requests.length).toEqual(0, '0 attempts should have been made');
                done();
            });
    })());

    it('handles a chunked endpoint failing with a read error', (done) => inject([VcdHttpClient], (httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        jasmine.Ajax.stubRequest('testUrl')
            .andReturn({status: 200});
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', 1024, 2);
        transferClient
            .upload(new BrokenBlob(TEST_BLOB.size)) // This should definitely bork
            .subscribe((result: TransferResult) => {
                fail('Should not have succeeded');
                done();
            }, (err: Error) => {
                const requests = jasmine.Ajax.requests.filter('testUrl');
                expect(requests.length).toEqual(0, '0 attempts should have been made');
                done();
            });
    })());


    // tslint:disable-next-line:max-line-length
    it('handles a chunked endpoint with intermittent 500s', (done) => inject([XhrFactory, VcdHttpClient], (xhrFactory: XhrFactory, httpClient: VcdHttpClient) => {
        jasmine.Ajax.stubRequest(/.*/)
            .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
        const originalBuildFn = xhrFactory.build;
        const transferClient = new VcdTransferClient(httpClient, 'testUrl', Math.ceil(TEST_BLOB.size / 3), 2);
        const failingCallNumbers = [0, 1, 3, 5, 6];
        let callCount = 0;
        spyOn(xhrFactory, 'build').and.callFake((...args: any[]) => {  // Have to spy on the XhrFactory to be sure to catch each request
            jasmine.Ajax.stubs.reset();
            jasmine.Ajax.stubRequest(/.*/)
                .andReturn({status: 500, responseText: 'Unexpected Ajax call'});
            const status = failingCallNumbers.indexOf(callCount) !== -1 ? 500 : 200;
            jasmine.Ajax.stubRequest('testUrl').andReturn({status});
            callCount++;
            return originalBuildFn.apply(httpClient, args);
        });
        transferClient
            .upload(TEST_BLOB)
            .subscribe((result: TransferResult) => {
                const requests = jasmine.Ajax.requests.filter('testUrl');
                expect(requests.length).toEqual(8, '8 requests should have been made (3 chunks, 5 failures)');

                expect(result.bytesSent).toEqual(TEST_BLOB.size, 'Wrong bytes sent');
                expect(result.chunksSent).toEqual(3, 'Wrong chunks sent');
                expect(result.filename).toEqual('<blob>', 'Wrong filename');
                expect(result.retryCount).toEqual(failingCallNumbers.length, 'Unexpected retries');
                expect(result.transferUrl).toBe('testUrl');

                expect(requests[0].requestHeaders['Content-Range'])
                    .toEqual(requests[1].requestHeaders['Content-Range'], 'First chunk was not retried');
                expect(requests[1].requestHeaders['Content-Range'])
                    .toEqual(requests[2].requestHeaders['Content-Range'], 'First chunk was retried only once');
                expect(requests[2].requestHeaders['Content-Range'])
                    .not.toEqual(requests[3].requestHeaders['Content-Range'], 'First chunk was retried two times');

                done();
            }, (err: Error) => {
                fail(err);
                done();
            });
    })());

});
